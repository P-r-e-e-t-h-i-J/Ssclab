4. Design, develop and implement YACC/C program to demonstrate Shift Reduce Parsing
technique for the grammar rules: E →E+T | T, T →T*F | F, F →(E) | id and parse the
sentence: id + id * id.
4.c
#include<stdio.h>
#include<string.h>
int z=0,i=0,j=0,c=0;
char a[15],stk[15],act[10];
void check();
void main()
{
puts("The GRAMMAR is\n E->E+T|T \n T->T*F|F \n F->(E) \n F->id");
puts("Enter input string:");
gets(a);
c=strlen(a); //Find the length of the string
strcpy(act,"Shift->");
puts("\nSTACK \t INPUT \t\t ACTION");
printf("_____________________________________________\n");
printf("$\t%s$",a);
for(i=0,j=0;j<c;i++,j++) //Shift action
{
if(a[j]=='i' && a[j+1]=='d') //For id
{
stk[i]=a[j];
stk[i+1]=a[j+1];
stk[i+2]='\0';
a[j]=' ';
a[j+1]=' ';
printf("\n$%s\t%s$\t\t%sid",stk,a,act);
j++;
i++;
check();

}

else //For other symbols
{

stk[i]=a[j];
stk[i+1]='\0';
a[j]=' ';
printf("\n$%s\t%s$\t\t%s%c",stk,a,act,stk[i]);

check();
}
}
z=0;
if(stk[z]=='E' && strlen(stk)==1)
{

printf("\nSUCCESS");

}
else
{
printf("\nERROR");

}
}

void check() //Reduce action
{
//Reduce by F->(E)
for(z=0;z<c;z++)
{
if(stk[z]=='(' && stk[z+1]=='E' && stk[z+2]==')')
{
stk[z]='F';
stk[z+1]='\0';
stk[z+2]='\0';
printf("\n$%s\t%s$\t\tReduce (E) to F",stk,a);
i=i-2;

}
}

//Reduce by F->id
for(z=0;z<c;z++)
{
if(stk[z]=='i' && stk[z+1]=='d')
{
stk[z]='F';
stk[z+1]='\0';
printf("\n$%s\t%s$\t\tReduce id to F",stk,a);

i=i-1;

}
}

//Reduce by T->T*F|F
for(z=0;z<c;z++)
{
if(stk[z]=='T' && stk[z+1]=='*' && stk[z+2]=='F')
{
stk[z]='T';
stk[z+1]='\0';
stk[z+2]='\0';
printf("\n$%s\t%s$\t\tReduce T*F to T",stk,a);
i=i-2;

}

else if(stk[z]=='F')
{
stk[z]='T';
printf("\n$%s\t%s$\t\tReduce F to T",stk,a);
}
}

//Reduce by E->E+T|T
for(z=0;z<c;z++)
{
if(stk[z]=='E' && stk[z+1]=='+' && stk[z+2]=='T' && stk[z+3]=='*')
{
break;
}
if(stk[z]=='E' && stk[z+1]=='+' && stk[z+2]=='T')

{

if(a[j+1]=='*')

{
break;
}
else
{
stk[z]='E';
stk[z+1]='\0';
stk[z+2]='\0';
printf("\n$%s\t%s$\t\tReduce E+T to E",stk,a);
i=i-2;
}
}
else if(stk[z]=='T' && stk[z+1]!='*' && a[j+1]!='*')

{
stk[z]='E';
printf("\n$%s\t%s$\t\tReduce T to E",stk,a);
}
}
}

Execution Steps:
cc 4.c
./a.out

Output:
RUN 1:
GRAMMAR is
E->E+T|T
T->T*F|F
F->(E)
F->ID
Enter input string: id+id*id
STACK INPUT ACTION
_________________________________________
$ id+id*id$
$id +id*id$ Shift->id
$F +id*id$ Reduce id to F
$T +id*id$ Reduce F to T
$E +id*id$ Reduce T to E
$E+ id*id$ Shift->+
$E+id *id$ Shift->id
$E+F *id$ Reduce id to F
$E+T *id$ Reduce F to T
$E+T* id$ Shift->*
$E+T*id $ Shift->id
$E+T*F $ Reduce id to F
$E+T $ Reduce T*F to T
$E $ Reduce E+T to E
SUCCESS

RUN 2:
GRAMMAR is
E->E+T|T
T->T*F|F
F->(E)
F->ID

Enter input string: id++
STACK INPUT ACTION
_____________________________________________
$ id++$
$id ++$ Shift->id
$F ++$ Reduce id to F
$T ++$ Reduce F to T
$E ++$ Reduce T to E
$E+ +$ Shift->+
$E++ $ Shift->+
ERROR
